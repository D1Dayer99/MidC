{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Midi } from \"@tonejs/midi\";\nimport Timer from \"../../utils/SetTimeoutTimer\";\nimport { canvasState, keyboardState, menuState } from \"@/store/consts/states.js\";\nimport { SET_CURRENT_SONG, SET_CURRENT_SONG_DURATION, SET_IS_LOADING, ADD_NEW_RECORDED_SONG, ADD_TIMER, CLEAR_TIMERS, SET_NOTE_PRESSED, CLEAR_PRESSED_KEYS } from \"@/store/consts/mutation_types.js\";\nimport { changeSong, clearTimes, pauseTimers, resumeTimers, prepareNotes, prepareSong, stopPlaying, startDrawNote, stopDrawNote } from \"@/store/consts/actions.js\";\nimport { ADD_SONG } from \"../consts/mutation_types\";\nconst SONGS_URL = \"./songs/\";\nexport default {\n  namespaced: true,\n  state: {\n    songs: [{\n      name: \"Rick Astley - Never Gonna Give You Up\",\n      fromPlaylist: true\n    }, {\n      name: \"J. Pachelbel - Canon in D\",\n      fromPlaylist: true\n    }],\n    currentSong: \"\",\n    timers: [],\n    currentSongDuration: 0,\n    isLoading: false,\n    uploadMidi: null\n  },\n  mutations: {\n    [SET_CURRENT_SONG](state, val) {\n      state.currentSong = val;\n    },\n    [SET_CURRENT_SONG_DURATION](state, val) {\n      state.currentSongDuration = val;\n    },\n    [SET_IS_LOADING](state, val) {\n      state.isLoading = val;\n    },\n    [ADD_NEW_RECORDED_SONG](state, val) {\n      state.songs.unshift(val);\n    },\n    [ADD_TIMER](state, timer) {\n      state.timers.push(timer);\n    },\n    [CLEAR_TIMERS](state) {\n      state.timers.length = 0;\n    },\n    [ADD_SONG](state, song) {\n      state.songs.push(song);\n    }\n  },\n  actions: {\n    [changeSong]({\n      commit,\n      dispatch\n    }, currentSong) {\n      commit(SET_CURRENT_SONG, currentSong);\n      if (currentSong != \"\") {\n        dispatch(prepareSong);\n      }\n    },\n    [clearTimes]({\n      state,\n      commit\n    }) {\n      state.timers.forEach(timer => timer.pause());\n      commit(CLEAR_TIMERS);\n    },\n    [pauseTimers]({\n      state\n    }) {\n      state.timers.forEach(timer => timer.pause());\n    },\n    [resumeTimers]({\n      state\n    }) {\n      state.timers.forEach(timer => timer.resume());\n    },\n    [prepareNotes]({\n      state,\n      rootState,\n      commit,\n      dispatch\n    }, {\n      notes,\n      lastSong\n    }) {\n      notes.forEach((note, i) => {\n        if (lastSong && i === notes.length - 1) {\n          commit(SET_CURRENT_SONG_DURATION, note.time + note.duration);\n        }\n        rootState.toneState.tone.Transport.schedule(() => {\n          commit(ADD_TIMER, new Timer(() => {\n            if (state.currentSong.fromPlaylist) {\n              rootState.toneState.sampler.triggerAttackRelease(note.name, note.duration, rootState.toneState.tone.now(), note.velocity);\n            } else {\n              rootState.toneState.sampler.triggerAttack(note.name);\n            }\n          }, rootState.canvasState.waterfallDelay));\n        }, note.time);\n        let index = null;\n        let forBlackNote = false;\n        for (let i = 0; i < rootState.keyboardState.notes.length; i++) {\n          if (rootState.keyboardState.notes[i].note === note.name) {\n            index = i;\n            break;\n          } else if (rootState.keyboardState.notes[i].blackNote && rootState.keyboardState.notes[i].blackNote.note === note.name) {\n            index = i;\n            forBlackNote = true;\n            break;\n          }\n        }\n        rootState.toneState.tone.Transport.schedule(time => {\n          if (index != null) {\n            commit(ADD_TIMER, new Timer(() => {\n              commit(keyboardState + \"/\" + SET_NOTE_PRESSED, {\n                index,\n                forBlackNote,\n                pressed: true\n              }, {\n                root: true\n              });\n            }, rootState.canvasState.waterfallDelay));\n            dispatch(canvasState + \"/\" + startDrawNote, {\n              noteName: note.name,\n              forBlackNote\n            }, {\n              root: true\n            });\n          }\n        }, note.time);\n        rootState.toneState.tone.Transport.schedule(time => {\n          if (index != null) {\n            commit(ADD_TIMER, new Timer(() => {\n              commit(keyboardState + \"/\" + SET_NOTE_PRESSED, {\n                index,\n                forBlackNote,\n                pressed: false\n              }, {\n                root: true\n              });\n              rootState.toneState.sampler.triggerRelease(note.name);\n              if (lastSong && i === notes.length - 1) {\n                dispatch(stopPlaying, \"\");\n              }\n            }, rootState.canvasState.waterfallDelay));\n            dispatch(canvasState + \"/\" + stopDrawNote, {\n              noteName: note.name,\n              forBlackNote\n            }, {\n              root: true\n            });\n          }\n        }, note.time + note.duration);\n      });\n    },\n    [prepareSong]({\n      state,\n      dispatch\n    }) {\n      if (state.currentSong.fromPlaylist) {\n        Midi.fromUrl(SONGS_URL + state.currentSong.name + \".mid\").then(midi => {\n          midi.tracks.forEach((track, i) => dispatch(prepareNotes, {\n            notes: track.notes,\n            lastSong: midi.tracks.length == i + 1\n          }));\n        });\n      } else {\n        dispatch(prepareNotes, {\n          notes: state.currentSong.notes,\n          lastSong: true\n        });\n      }\n    },\n    [stopPlaying]({\n      dispatch,\n      rootState,\n      commit\n    }, currentSong) {\n      commit(SET_IS_LOADING, true);\n      dispatch(clearTimes);\n      commit(keyboardState + \"/\" + CLEAR_PRESSED_KEYS, {}, {\n        root: true\n      });\n      dispatch(menuState + \"/\" + stopPlaying, {}, {\n        root: true\n      });\n      setTimeout(() => {\n        rootState.toneState.tone.Transport.stop();\n        rootState.toneState.tone.Transport.cancel();\n        dispatch(changeSong, currentSong);\n        commit(SET_IS_LOADING, false);\n      }, 10);\n    }\n  }\n};","map":{"version":3,"names":["Midi","Timer","canvasState","keyboardState","menuState","SET_CURRENT_SONG","SET_CURRENT_SONG_DURATION","SET_IS_LOADING","ADD_NEW_RECORDED_SONG","ADD_TIMER","CLEAR_TIMERS","SET_NOTE_PRESSED","CLEAR_PRESSED_KEYS","changeSong","clearTimes","pauseTimers","resumeTimers","prepareNotes","prepareSong","stopPlaying","startDrawNote","stopDrawNote","ADD_SONG","SONGS_URL","namespaced","state","songs","name","fromPlaylist","currentSong","timers","currentSongDuration","isLoading","uploadMidi","mutations","val","unshift","timer","push","length","song","actions","commit","dispatch","forEach","pause","resume","rootState","notes","lastSong","note","i","time","duration","toneState","tone","Transport","schedule","sampler","triggerAttackRelease","now","velocity","triggerAttack","waterfallDelay","index","forBlackNote","blackNote","pressed","root","noteName","triggerRelease","fromUrl","then","midi","tracks","track","setTimeout","stop","cancel"],"sources":["/Users/Sunhaoxiang/Desktop/IB_CS/CS_IA/src/store/modules/playlistState.js"],"sourcesContent":["import { Midi } from \"@tonejs/midi\"\nimport Timer  from \"../../utils/SetTimeoutTimer\"\nimport { canvasState, keyboardState, menuState } from \"@/store/consts/states.js\";\nimport { SET_CURRENT_SONG, \n    SET_CURRENT_SONG_DURATION,\n    SET_IS_LOADING,\n    ADD_NEW_RECORDED_SONG,\n    ADD_TIMER,\n    CLEAR_TIMERS,\n    SET_NOTE_PRESSED,\n    CLEAR_PRESSED_KEYS\n} from \"@/store/consts/mutation_types.js\";\nimport { changeSong, \n    clearTimes,\n    pauseTimers,\n    resumeTimers,\n    prepareNotes,\n    prepareSong,\n    stopPlaying,\n    startDrawNote,\n    stopDrawNote,\n} from \"@/store/consts/actions.js\";\nimport { ADD_SONG } from \"../consts/mutation_types\";\n\nconst SONGS_URL = \"./songs/\";\n\nexport default {\n    namespaced: true,\n\n    state: {\n    songs:[\n        {name : \"Rick Astley - Never Gonna Give You Up\", fromPlaylist: true },\n        {name : \"J. Pachelbel - Canon in D\", fromPlaylist: true}\n        ],\n    currentSong: \"\",\n    timers : [],\n    currentSongDuration: 0,\n    isLoading: false,\n    uploadMidi: null,\n    },\n\n    mutations: {\n    [SET_CURRENT_SONG](state, val){\n        state.currentSong = val;\n    },\n    [SET_CURRENT_SONG_DURATION](state, val){\n        state.currentSongDuration = val;\n    },\n    [SET_IS_LOADING](state, val){\n        state.isLoading = val;\n    },\n    [ADD_NEW_RECORDED_SONG](state, val){\n        state.songs.unshift(val);\n    },\n    [ADD_TIMER](state, timer){\n        state.timers.push(timer);\n    },\n    [CLEAR_TIMERS](state){\n        state.timers.length = 0;\n    },\n    [ADD_SONG](state,song) {\n        state.songs.push(song)\n    }\n    },\n\n    actions: {\n        [changeSong]({commit, dispatch}, currentSong) {\n            commit(SET_CURRENT_SONG, currentSong);\n            if(currentSong != \"\"){\n                dispatch(prepareSong);\n            }\n        },\n        [clearTimes]({state, commit}){\n            state.timers.forEach(timer => timer.pause());\n            commit(CLEAR_TIMERS);\n        },\n\n        [pauseTimers]({state}){\n            state.timers.forEach(timer => timer.pause());\n        },\n\n        [resumeTimers]({state}){\n            state.timers.forEach(timer => timer.resume());\n        },\n\n        [prepareNotes]({state, rootState, commit, dispatch}, {notes, lastSong}) {\n            notes.forEach((note, i) => {\n                if(lastSong && i === notes.length - 1){\n                    commit(SET_CURRENT_SONG_DURATION, note.time + note.duration);\n                }\n                \n                rootState.toneState.tone.Transport.schedule(() => {\n                    commit(ADD_TIMER, new Timer(() => {\n                        \n                        if(state.currentSong.fromPlaylist){\n                            rootState.toneState.sampler.triggerAttackRelease(note.name, note.duration, rootState.toneState.tone.now(), note.velocity);\n                        } else {\n                            rootState.toneState.sampler.triggerAttack(note.name);\n                        }\n\n                    }, rootState.canvasState.waterfallDelay));\n            \n                }, note.time)\n    \n                let index = null;\n                let forBlackNote = false;\n                for (let i = 0; i < rootState.keyboardState.notes.length; i++) {\n                    if(rootState.keyboardState.notes[i].note === note.name){\n                    index = i;\n                    break;\n                    } \n                    else if(rootState.keyboardState.notes[i].blackNote && rootState.keyboardState.notes[i].blackNote.note === note.name){\n                    index = i;\n                    forBlackNote = true;\n                    break;\n                    }\n                }\n    \n                rootState.toneState.tone.Transport.schedule(time => {\n                        if(index != null){\n                            commit(ADD_TIMER, new Timer(() => {\n                                commit(keyboardState + \"/\" + SET_NOTE_PRESSED, {index, forBlackNote, pressed : true}, {root:true});\n                            }, rootState.canvasState.waterfallDelay));\n                            \n                            dispatch(canvasState + \"/\" + startDrawNote, {noteName : note.name, forBlackNote}, {root:true});\n                        }\n                }, note.time)\n    \n                rootState.toneState.tone.Transport.schedule(time => {\n                        if(index != null){\n                            commit(ADD_TIMER, new Timer(() => {\n\n                                commit(keyboardState + \"/\" + SET_NOTE_PRESSED, {index, forBlackNote, pressed : false}, {root:true});\n                                rootState.toneState.sampler.triggerRelease(note.name);\n\n                                if(lastSong && i === notes.length - 1){\n                                    dispatch(stopPlaying, \"\");\n                                }\n\n                            }, rootState.canvasState.waterfallDelay));\n\n                            dispatch(canvasState + \"/\" + stopDrawNote, {noteName : note.name, forBlackNote}, {root:true});\n                        }\n                }, note.time + note.duration)\n    \n            })\n        },\n\n        [prepareSong]({state, dispatch}){\n            if(state.currentSong.fromPlaylist){\n                Midi.fromUrl(SONGS_URL + state.currentSong.name + \".mid\").then(midi => {\n                    midi.tracks.forEach((track, i) => dispatch(prepareNotes, {notes : track.notes, lastSong : midi.tracks.length == i + 1}));\n                });  \n            } else {\n                dispatch(prepareNotes, {notes:state.currentSong.notes, lastSong : true})\n            }\n        },\n\n        [stopPlaying]({dispatch, rootState, commit}, currentSong){\n            commit(SET_IS_LOADING, true);\n            dispatch(clearTimes);\n            commit(keyboardState + \"/\" + CLEAR_PRESSED_KEYS, {}, {root:true});\n            dispatch(menuState + \"/\" + stopPlaying, {}, {root:true});\n            \n            setTimeout(() => {\n                rootState.toneState.tone.Transport.stop();\n                rootState.toneState.tone.Transport.cancel();\n                dispatch(changeSong, currentSong);\n                commit(SET_IS_LOADING, false);\n            }, 10)\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}