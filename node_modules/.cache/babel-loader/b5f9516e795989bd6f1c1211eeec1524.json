{"ast":null,"code":"/* Importing necessary files and functions*/\nimport PianoMenu from \"./components/piano/menu\"; /* Used for the features used by the user, such as toggling play/stop, toggling note annotations etc*/\nimport PianoKeyboard from \"./components/piano/keyboard\"; /* Drawing the keyboard */\nimport SaveSong from \"./components/screens/savesong\";\nimport Loading from \"./components/screens/loading\";\nimport { mapState, mapActions } from 'vuex'; /* State management */\nimport { canvasState } from \"@/store/consts/states.js\";\nimport { resizeCanvas } from \"@/store/consts/actions.js\";\nexport default {\n  components: {\n    PianoMenu,\n    PianoKeyboard,\n    SaveSong,\n    Loading\n  },\n  /*resizing the piano key sizes*/\n  created() {\n    window.addEventListener(\"resize\", this.resize);\n    this.$root.$on(\"resize_canvas_notes\", this.resize);\n  },\n  destroyed() {\n    window.removeEventListener(\"resize\", {});\n  },\n  methods: {\n    ...mapActions(canvasState, [resizeCanvas]),\n    /** \n     * document.getElementById/getElementsByClassName are took from PianoKeyboard.vue  \n     * because they are already rendered in resize when event eventually happens\n    **/\n    resize() {\n      const pianoContainerDimensions = document.getElementById(\"piano-container\").getBoundingClientRect(); /*Initialized in keyboard.vue, getting the size of the keyboard */\n      const pianoMenuDimensions = document.getElementById(\"piano-menu\").getBoundingClientRect();\n      const height = window.innerHeight - pianoContainerDimensions.height - pianoMenuDimensions.height + 1; /*Resizing the menu and the keyboard  */\n      const width = pianoContainerDimensions.width;\n      const whiteNotes = document.getElementsByClassName(\"white-note\"); /*Returns a HTML collection of all the white/black notes respectively */\n      const blackNotes = document.getElementsByClassName(\"black-note\");\n      const whiteWidth = whiteNotes[0].getBoundingClientRect().width;\n      const blackWidth = blackNotes[0].getBoundingClientRect().width;\n      const array = Array.from(whiteNotes).concat(Array.from(blackNotes)); /*Merging the two arrays*/\n      const waterfallDelay = height * 10;\n      this.resizeCanvas({\n        height,\n        width,\n        array,\n        whiteWidth,\n        blackWidth,\n        waterfallDelay\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IAAAC;IAAAC;IAAAC;IAAAC;EAAA;EAEA;EACAC;IACAC;IACA;EACA;EACAC;IACAD;EACA;EACAE;IACA;IACA;AACA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;IACA;EACA;AACA","names":["components","PianoMenu","PianoKeyboard","SaveSong","Loading","created","window","destroyed","methods","resize","height","width","array","whiteWidth","blackWidth","waterfallDelay"],"sourceRoot":"src","sources":["Piano.vue"],"sourcesContent":["<template>  <!-- Creating a template for the canvas aka the piano app -->\n  <div id=\"piano\" data-app>\n    <PianoMenu> </PianoMenu>\n    <canvas style=\"background: url('./canvas_black_background.jpg')\"> </canvas>\n    <PianoKeyboard> </PianoKeyboard>\n    <SaveSong> </SaveSong>\n    <Loading> </Loading>\n  </div>\n</template>\n\n<script>\n/* Importing necessary files and functions*/\nimport PianoMenu from \"./components/piano/menu\"; /* Used for the features used by the user, such as toggling play/stop, toggling note annotations etc*/\nimport PianoKeyboard from \"./components/piano/keyboard\";  /* Drawing the keyboard */\nimport SaveSong from \"./components/screens/savesong\"\nimport Loading from \"./components/screens/loading\"\nimport { mapState, mapActions } from 'vuex'; /* State management */ \nimport { canvasState } from \"@/store/consts/states.js\"; \nimport { resizeCanvas } from \"@/store/consts/actions.js\";\n\nexport default {\n  components : { PianoMenu, PianoKeyboard, SaveSong, Loading },\n\n  /*resizing the piano key sizes*/\n  created(){\n    window.addEventListener(\"resize\", this.resize);\n    this.$root.$on(\"resize_canvas_notes\", this.resize);\n  },\n  destroyed() {\n    window.removeEventListener(\"resize\", {});\n  },\n  methods: {\n    ...mapActions(canvasState, [resizeCanvas]),\n    /** \n     * document.getElementById/getElementsByClassName are took from PianoKeyboard.vue  \n     * because they are already rendered in resize when event eventually happens\n    **/\n    resize() {\n      const pianoContainerDimensions = document.getElementById(\"piano-container\").getBoundingClientRect(); /*Initialized in keyboard.vue, getting the size of the keyboard */\n      const pianoMenuDimensions = document.getElementById(\"piano-menu\").getBoundingClientRect();\n      const height = window.innerHeight - pianoContainerDimensions.height - pianoMenuDimensions.height + 1; /*Resizing the menu and the keyboard  */\n      const width = pianoContainerDimensions.width;\n      const whiteNotes = document.getElementsByClassName(\"white-note\"); /*Returns a HTML collection of all the white/black notes respectively */\n      const blackNotes = document.getElementsByClassName(\"black-note\");\n      const whiteWidth = whiteNotes[0].getBoundingClientRect().width;\n      const blackWidth = blackNotes[0].getBoundingClientRect().width;\n      const array = Array.from(whiteNotes).concat(Array.from(blackNotes)); /*Merging the two arrays*/\n      const waterfallDelay = height * 10; \n      this.resizeCanvas({height, width, array, whiteWidth, blackWidth, waterfallDelay});\n    },\n  },\n}\n</script>\n\n<style>\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10+ and Edge */\n  user-select: none; /* Standard syntax */\n  box-sizing: border-box;\n  font-family: \"Lucida Console\", Courier, monospace;\n}\nbody, html {\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  overflow-y: hidden;\n}\n \n#piano {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n}\nselect:focus {\n  outline: 0;\n}\n \nbutton:focus {\n  outline: 0;\n}\n \ninput:focus {\n  outline: 0;\n} \n::-webkit-scrollbar {\n  width: 5px;\n}\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 2px;\n}\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n  border-radius: 2px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}