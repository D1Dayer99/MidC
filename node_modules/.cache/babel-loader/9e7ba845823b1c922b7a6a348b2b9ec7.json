{"ast":null,"code":"import { mapState, mapActions } from 'vuex';\nimport AboutDialog from '../screens/about';\nimport ProgressBar from '../ProgressBar';\nimport { PlayingState } from \"../../utils/PlayingState\";\nimport { keyboardState, toneState, recordingState, canvasState, menuState, playlistState } from \"@/store/consts/states.js\";\nimport { setPlaying, startRecording, stopRecording, whiteNoteColorChanged, blackNoteColorChanged, stopPlaying, changeVolume, changeSpeed, changeOctaves, changeSong } from \"@/store/consts/actions.js\";\nimport { SET_EDIT_KEYS, SET_SHOW_KEYS, SET_SHOW_CONFIG, SET_SHOW_NOTES, SET_CURRENT_SONG, ADD_SONG } from \"@/store/consts/mutation_types.js\";\nexport default {\n  components: {\n    AboutDialog,\n    ProgressBar\n  },\n  data: () => {\n    return {\n      dialog: false,\n      selectedFile: null\n    };\n  },\n  methods: {\n    ...mapActions(menuState, [setPlaying]),\n    ...mapActions(recordingState, [startRecording, stopRecording]),\n    togglePlay() {\n      if (this.playlistState.currentSong != \"\") {\n        if (this.menuState.playing === PlayingState.PLAY) {\n          this.setPlaying(PlayingState.PAUSE);\n          this.toneState.tone.Transport.pause();\n        } else {\n          this.setPlaying(PlayingState.PLAY);\n          this.toneState.tone.Transport.start();\n        }\n      }\n    },\n    onCloseAboutDialog() {\n      this.dialog = false;\n    },\n    whiteNoteColorChanged: function (e) {\n      this.$store.dispatch(menuState + \"/\" + whiteNoteColorChanged, e.target.value);\n    },\n    blackNoteColorChanged: function (e) {\n      this.$store.dispatch(menuState + \"/\" + blackNoteColorChanged, e.target.value);\n    },\n    stopPlaying() {\n      this.$store.dispatch(playlistState + \"/\" + stopPlaying, \"\");\n    },\n    handleRecording() {\n      this.recordingState.isRecording ? this.stopRecording() : this.startRecording();\n    },\n    editKeys() {\n      this.$store.commit(menuState + \"/\" + SET_EDIT_KEYS, !this.menuState.editKeys);\n      if (this.menuState.editKeys && !this.menuState.showKeys) {\n        this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, true);\n      } else if (!this.menuState.editKeys) {\n        this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, false);\n      }\n    },\n    showConfig() {\n      this.$store.commit(menuState + \"/\" + SET_SHOW_CONFIG, !this.menuState.showConfig);\n    },\n    showKeys() {\n      this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, !this.menuState.showKeys);\n    },\n    showNotes() {\n      this.$store.commit(menuState + \"/\" + SET_SHOW_NOTES, !this.menuState.showNotes);\n    },\n    handleVolume(volume) {\n      this.$store.dispatch(menuState + \"/\" + changeVolume, volume);\n    },\n    handleSpeed(speed) {\n      this.$store.dispatch(menuState + \"/\" + changeSpeed, speed);\n    },\n    octaveChanged: function (value) {\n      this.$store.dispatch(menuState + \"/\" + changeOctaves, Object.values(value));\n      setTimeout(() => this.$root.$emit(\"resize_canvas_notes\"), 100);\n    },\n    handleUpload() {\n      this.$refs.fileInput.click();\n      console.log(\"Hello\");\n    },\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0];\n      let formData = new FormData();\n      formData, append('song', this.selectedFile);\n      axios.post('/api/upload', formData).then(response => {\n        let filename = response.data.fileName;\n        let song = {\n          name: filename,\n          fromPlaylist: true\n        };\n        this.$store.commit(ADD_SONG, song);\n        this.$store.commit(SET_CURRENT_SONG, song);\n        this.$store.dispatch(changeSong);\n      }).catch(error => {\n        console.log(\"Not a MIDI file\");\n      });\n    }\n  },\n  computed: {\n    ...mapState([menuState, toneState, playlistState, recordingState]),\n    playIcon: function () {\n      return this.menuState.playing === PlayingState.PLAY ? 'mdi-pause' : 'mdi-play';\n    },\n    uploadIcon: function () {\n      return this.playlistState.uploadMidi === 'arrow-collapse-up';\n    },\n    playIconTooltip: function () {\n      return this.menuState.playing === PlayingState.PLAY ? 'Pause' : 'Play';\n    },\n    notesIcon: function () {\n      return this.menuState.showNotes ? 'mdi-music-note-off' : 'mdi-music-note';\n    },\n    keyboardIcon: function () {\n      return this.menuState.showKeys ? 'mdi-keyboard-off-outline' : 'mdi-keyboard-outline';\n    },\n    configIcon: function () {\n      return this.menuState.showConfig ? 'mdi-chevron-up' : 'mdi-chevron-down';\n    },\n    recordLight: function () {\n      return this.recordingState.isRecording ? \"linear-gradient(-45deg, green, rgb(152,251,152,0.7))\" : \"linear-gradient(-45deg, red, rgb(240,128,128,0.7))\";\n    },\n    fontSize() {\n      switch (this.$vuetify.breakpoint.name) {\n        case 'xs':\n          return 0.7;\n        default:\n          return 0.8;\n      }\n    },\n    currentSongPlaylist: {\n      get() {\n        return this.playlistState.currentSong;\n      },\n      set(value) {\n        this.$store.dispatch(playlistState + \"/\" + stopPlaying, value);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAwNA;AACA;AACA;AACA;AACA;AACA,2EACAA;AACA;AAEA;EACAC;IAAAC;IAAAC;EAAA;EAEAC;IACA;MACAC;MACAC;IACA;EACA;EAEAC;IACA;IACA;IAEAC;MACA;QAEA;UACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAV;MACA;IACA;IAEAW;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MAEA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACAC;IACA;IACAC;MACA;MACAC;IACA;IACAC;MACA;MACA;MACAC;MACAC;QACA;QACA;UAAAC;UAAAC;QAAA;QACA;QACA;QACA;MACA;QACAL;MACA;IACA;EACA;EAEAM;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QACA;UAAA;QACA;UAAA;MAAA;IAEA;IAEAC;MACAC;QACA;MACA;MACAC;QACA;MACA;IACA;EACA;AACA","names":["blackNoteColorChanged","components","AboutDialog","ProgressBar","data","dialog","selectedFile","methods","togglePlay","onCloseAboutDialog","whiteNoteColorChanged","stopPlaying","handleRecording","editKeys","showConfig","showKeys","showNotes","handleVolume","handleSpeed","octaveChanged","setTimeout","handleUpload","console","handleFileChange","formData","axios","name","fromPlaylist","computed","playIcon","uploadIcon","playIconTooltip","notesIcon","keyboardIcon","configIcon","recordLight","fontSize","currentSongPlaylist","get","set"],"sourceRoot":"src/components/main","sources":["menu.vue"],"sourcesContent":["<template>\n    <div id=\"piano-menu\" style=\"width: 100%\">\n        <v-container fluid class=\"top-nav\">\n            <v-row style=\"align-items: center\">\n                <v-col cols=\"12\" md=\"4\" class=\"no-default-vertical-padding\"> \n                    <div class=\"buttons-section\">\n                        <div class=\"button-group\">\n                            <v-icon class=\"piano-icon\">mdi-piano</v-icon>\n                        </div>\n\n                        <div class=\"button-group\">\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                        <div\n                                            @click=\"handleRecording()\" \n                                            v-bind=\"attrs\"\n                                            v-on=\"on\"\n                                            :style=\"{background: recordLight}\" \n                                            class=\"record-icon\"/>\n                                </template>\n                                <span>Record</span>\n                            </v-tooltip>\n\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <button \n                                        @click=\"togglePlay()\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                        <v-icon class=\"piano-icon\">{{playIcon}}</v-icon>\n                                    </button>\n                                </template>\n                                <span>{{playIconTooltip}}</span>\n                            </v-tooltip>\n\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <button \n                                        @click=\"stopPlaying()\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                        <v-icon class=\"piano-icon\">mdi-stop</v-icon>\n                                    </button>\n                                </template>\n                                <span>Stop</span>\n                            </v-tooltip>\n                        </div>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" md=\"4\" class=\"no-default-vertical-padding\"> \n                    <div class=\"screen\">\n                        <v-select\n                            v-model=\"currentSongPlaylist\" \n                            :items=\"playlistState.songs\"\n                            item-text=\"name\"\n                            :menu-props=\"{ auto: true, maxHeight: 50 }\"\n                            return-object\n                            hide-details\n                            solo\n                            placeholder=\"Songs\"\n                        ></v-select>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" md=\"4\" class=\"no-default-vertical-padding\"> \n                    <div class=\"buttons-section\"> \n                        <div class=\"button-group\">\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <button \n                                        @click=\"showNotes()\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                        <v-icon class=\"piano-icon\">{{notesIcon}}</v-icon>\n                                    </button>\n                                </template>\n                                <span>Music notes</span>\n                            </v-tooltip>\n\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <button \n                                        @click=\"showKeys()\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                        <v-icon class=\"piano-icon\">{{keyboardIcon}}</v-icon>\n                                    </button>\n                                </template>\n                                <span>Keys</span>\n                            </v-tooltip>\n\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{on,attrs}\">\n                                    <input id=\"fileInput\" type=\"file\" ref=\"fileInput\" v-on:change=\"handleFileChange\" v-on:click=\"handleUpload\" accept=\".mid,.midi\" />\n                                    <button\n                                        @click=\"handleUpload()\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                        <v-icon class=\"piano-icon\">mdi-upload</v-icon>\n                                    </button>\n                                </template>\n                                <span>Upload Midi</span>\n                            </v-tooltip>\n\n                        </div>\n\n                        <div class=\"button-group\">\n                            <v-tooltip bottom>\n                                <template v-slot:activator=\"{ on, attrs }\">\n                                    <button\n                                        @click=\"dialog = true\"\n                                        v-bind=\"attrs\"\n                                        v-on=\"on\">\n                                    <v-icon class=\"piano-icon\">mdi-information-outline</v-icon>\n                                    </button>\n                                </template>\n                                <span>About</span>\n                            </v-tooltip>\n\n                            <v-dialog v-model=\"dialog\" fullscreen hide-overlay transition=\"dialog-bottom-transition\">\n                                <AboutDialog :onClose=\"onCloseAboutDialog\"></AboutDialog>\n                            </v-dialog>\n\n                            <button @click=\"showConfig()\"><v-icon class=\"piano-icon\">{{configIcon}}</v-icon></button>\n                        </div>\n                    </div>\n                </v-col>\n            </v-row>\n        </v-container>\n        \n        <ProgressBar v-if=\"menuState.playing !== 3 || recordingState.isRecording\"></ProgressBar>\n\n        <v-container text-xs-center fluid :class=\"menuState.showConfig ? 'height-auto': 'height-zero'\" class=\"sub-top-nav\">\n            \n            <v-row justify=\"center\" align=\"center\">\n                <v-col cols=\"12\" sm=\"4\" md=\"3\"> \n                    <div @click=\"editKeys()\" class=\"config config-button\" :style=\"{fontSize: fontSize + 'em', minHeight: 6 * fontSize + 'em'}\">\n                        <template v-if=\"!menuState.editKeys\">Edit Keys</template>\n                        <template v-else>Save Keys</template>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" sm=\"4\" md=\"3\"> \n                    <div class=\"config\" :style=\"{fontSize: fontSize + 'em', minHeight: 6 * fontSize + 'em'}\">\n                        <label>Volume</label>\n                        <v-slider\n                            @change=\"handleVolume\"\n                            :value=\"menuState.volume\"\n                            style=\"margin-left: 1em\"\n                            dense\n                            hide-details\n                            thumb-label\n                            min=\"0\"\n                            max=\"100\"\n                            thumb-size=\"24\"\n                            color=\"#ffb200\"\n                            track-color=\"#dcdcdc\"\n                        ></v-slider>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" sm=\"4\" md=\"3\"> \n                    <div class=\"config\" :style=\"{fontSize: fontSize + 'em', minHeight: 6 * fontSize + 'em'}\">\n                        <label>Speed</label>\n                        <v-slider\n                            @change=\"handleSpeed\"\n                            :value=\"menuState.speed\"\n                            style=\"margin-left: 1em\"\n                            dense\n                            hide-details\n                            thumb-label\n                            min=\"30\"\n                            max=\"170\"\n                            thumb-size=\"24\"\n                            color=\"#ffb200\"\n                            track-color=\"#dcdcdc\"\n                        ></v-slider>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" sm=\"4\" md=\"3\">\n                    <div class=\"config\" :style=\"{fontSize: fontSize + 'em', minHeight: 6 * fontSize + 'em'}\">\n                    <label>Octave</label>\n                        <v-range-slider\n                            @change=\"octaveChanged\"\n                            :value=\"menuState.octaves\"\n                            ticks=\"always\"\n                            tick-size=\"4\"\n                            style=\"margin-left: 1em\"\n                            dense\n                            hide-details\n                            thumb-label\n                            min=\"1\"\n                            :max=\"menuState.maxEndOctave\"\n                            thumb-size=\"24\"\n                            color=\"#ffb200\"\n                            track-color=\"#dcdcdc\"\n                        ></v-range-slider>\n                    </div>\n                </v-col>\n\n                <v-col cols=\"12\" sm=\"4\" md=\"3\"> \n                    <div class=\"config\" :style=\"{fontSize: fontSize + 'em', minHeight: 6 * fontSize + 'em'}\">\n                        <label style=\"text-align: center\">White note</label>\n                        <input style=\"margin-left: 0.5em; margin-right: 0.5em\" :value=\"menuState.whiteNoteColor\" type=\"color\" @change=\"whiteNoteColorChanged\"/>\n                        <label style=\"text-align: center\">Black note</label>\n                        <input style=\"margin-left: 0.5em\" :value=\"menuState.blackNoteColor\" type=\"color\" @change=\"blackNoteColorChanged\"/>\n                    </div>\n                </v-col>\n            </v-row>\n        </v-container>\n    </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\nimport AboutDialog from '../screens/about';\nimport ProgressBar from '../ProgressBar';\nimport { PlayingState } from \"../../utils/PlayingState\";\nimport { keyboardState, toneState, recordingState, canvasState, menuState, playlistState } from \"@/store/consts/states.js\";\nimport { setPlaying, startRecording, stopRecording, whiteNoteColorChanged,\n    blackNoteColorChanged, stopPlaying, changeVolume, changeSpeed, changeOctaves, changeSong} from \"@/store/consts/actions.js\"\nimport { SET_EDIT_KEYS, SET_SHOW_KEYS, SET_SHOW_CONFIG, SET_SHOW_NOTES, SET_CURRENT_SONG, ADD_SONG} from \"@/store/consts/mutation_types.js\";\n\nexport default {\n    components: { AboutDialog, ProgressBar },\n\n    data: () => {\n        return {\n            dialog: false,\n            selectedFile: null\n        };\n    },\n\n    methods:{\n        ...mapActions(menuState, [setPlaying]),\n        ...mapActions(recordingState, [startRecording, stopRecording]),\n\n        togglePlay() {\n            if(this.playlistState.currentSong != \"\"){\n\n                if (this.menuState.playing === PlayingState.PLAY) {\n                    this.setPlaying(PlayingState.PAUSE);\n                    this.toneState.tone.Transport.pause();\n                } else {\n                    this.setPlaying(PlayingState.PLAY);\n                    this.toneState.tone.Transport.start();\n                }\n            }\n        },\n\n        onCloseAboutDialog() {\n            this.dialog = false;\n        },\n        \n        whiteNoteColorChanged: function(e) {\n            this.$store.dispatch(menuState + \"/\" + whiteNoteColorChanged, e.target.value)\n        },\n\n        blackNoteColorChanged: function(e) {\n            this.$store.dispatch(menuState + \"/\" + blackNoteColorChanged, e.target.value)\n        },\n\n        stopPlaying() {\n            this.$store.dispatch(playlistState + \"/\" + stopPlaying, \"\");\n        },\n\n        handleRecording(){\n            this.recordingState.isRecording ? this.stopRecording() : this.startRecording();\n        },\n\n        editKeys(){\n            this.$store.commit(menuState + \"/\" + SET_EDIT_KEYS, !this.menuState.editKeys);\n\n            if(this.menuState.editKeys  && !this.menuState.showKeys){\n                this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, true);\n            } else if(!this.menuState.editKeys) {\n                this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, false);\n            }\n        },\n\n        showConfig(){\n            this.$store.commit(menuState + \"/\" + SET_SHOW_CONFIG, !this.menuState.showConfig);\n        },\n\n        showKeys(){\n            this.$store.commit(menuState + \"/\" + SET_SHOW_KEYS, !this.menuState.showKeys);\n        },\n\n        showNotes(){\n            this.$store.commit(menuState + \"/\" + SET_SHOW_NOTES, !this.menuState.showNotes);\n        },\n\n        handleVolume(volume){\n            this.$store.dispatch(menuState + \"/\" + changeVolume, volume)\n        },\n\n        handleSpeed(speed){\n            this.$store.dispatch(menuState + \"/\" + changeSpeed, speed)\n        },\n\n        octaveChanged: function(value) {\n            this.$store.dispatch(menuState + \"/\" + changeOctaves, Object.values(value))\n            setTimeout(() => this.$root.$emit(\"resize_canvas_notes\"), 100);\n        },\n        handleUpload() {\n            this.$refs.fileInput.click();\n            console.log(\"Hello\")\n        },\n        handleFileChange(event) {\n            this.selectedFile = event.target.files[0];\n            let formData = new FormData();\n            formData, append('song', this.selectedFile);\n            axios.post('/api/upload', formData).then(response => {\n                let filename = response.data.fileName;\n                let song = { name: filename, fromPlaylist: true };\n                this.$store.commit(ADD_SONG, song);\n                this.$store.commit(SET_CURRENT_SONG, song)\n                this.$store.dispatch(changeSong)\n            }).catch(error => {\n                console.log(\"Not a MIDI file\")\n            })\n        },\n    }, \n\n    computed: {\n        ...mapState([menuState, toneState, playlistState, recordingState]),\n\n        playIcon: function() {\n            return this.menuState.playing === PlayingState.PLAY ? 'mdi-pause' : 'mdi-play';\n        },\n\n        uploadIcon: function () {\n            return this.playlistState.uploadMidi === 'arrow-collapse-up';\n        },\n\n        playIconTooltip: function() {\n            return this.menuState.playing === PlayingState.PLAY ? 'Pause' : 'Play';\n        },\n\n        notesIcon: function() {\n            return this.menuState.showNotes ? 'mdi-music-note-off' : 'mdi-music-note';\n        },\n\n        keyboardIcon: function() {\n            return this.menuState.showKeys ? 'mdi-keyboard-off-outline' : 'mdi-keyboard-outline';\n        },\n\n        configIcon: function() {\n            return this.menuState.showConfig ? 'mdi-chevron-up' : 'mdi-chevron-down'\n        },\n\n        recordLight: function() {\n            return this.recordingState.isRecording ? \"linear-gradient(-45deg, green, rgb(152,251,152,0.7))\" : \"linear-gradient(-45deg, red, rgb(240,128,128,0.7))\";\n        },\n\n        fontSize() {\n            switch (this.$vuetify.breakpoint.name) {\n                case 'xs': return 0.7;\n                default: return 0.8;\n            }\n        },\n\n        currentSongPlaylist: {\n            get () {\n                return this.playlistState.currentSong;\n            },\n            set (value){\n                this.$store.dispatch(playlistState + \"/\" + stopPlaying, value);\n            }\n        }\n    }\n}\n</script>\n\n<style>\ninput[type=\"file\"]{\n    display:none\n}\n\n.top-nav {\n    background-color: var(--v-primary-base);\n    padding: 2px 12px !important;\n}\n\n.sub-top-nav {\n    display: flex;\n    background-color: var(--v-secondary-base);\n    color: var(--v-text-base);\n    position: absolute;\n    z-index: 1;\n    width: 100%;\n    padding: 0 12px !important;\n}\n\n.height-auto {\n    overflow: hidden;\n    transition: max-height 1s;\n    max-height: 355px;\n}\n\n.height-zero {\n    overflow: hidden;\n    transition: max-height 1s;\n    max-height: 0;\n}\n\n.top-nav .screen {\n    margin: 15px 0;\n}\n\n.top-nav .buttons-section {\n    display: flex; \n    justify-content: space-between; \n    align-items: center;\n}\n\n.top-nav .buttons-section .button-group {\n    display: flex; \n    align-items: center;\n}\n\n.piano-icon {\n    color: var(--v-text-base) !important;\n    margin: 0 5px;\n}\n\n.piano-icon:hover {\n    color:var(--v-accent-base) !important;\n}\n\n.config {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--v-primary-base);\n    height: 100%;\n    border-radius: 0.5em;\n    padding: 0 2em;\n}\n\n.config-button {\n    cursor: pointer;\n}\n\n.config-button:hover {\n    color:var(--v-accent-base);\n}\n\n\n.record-icon {\n    cursor: pointer;\n    width: 1em;\n    height: 1em;\n    margin: 0 5px;\n    border-radius: 50%;\n        box-shadow:\n        0 0 0.5vw 0.1vw rgba(255,255,255,0.4),\n        inset 0 0 0.25vw rgba(255,255,255,0.6)\n}\n\n.no-default-vertical-padding {\n    padding: 0 12px !important\n}\n\n.v-text-field.v-text-field--solo .v-input__control {\n    min-height: 0 !important;\n}\n\n.v-list-item {\n    min-height: 0 !important;   \n}\n\n.v-text-field.v-text-field--solo .v-input__control {\n    height: 2em;\n    font-size: 0.8em;\n}\n\n.v-list-item .v-list-item__title, .v-list-item .v-list-item__subtitle{\n    font-size: 0.8em;\n}\n\n.v-icon.v-icon{\n    font-size: 1.5em;\n}  \n\n.v-slider__thumb-label {\n    color: var(--v-primary-base) !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}