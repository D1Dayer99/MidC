{"ast":null,"code":"import { mapState, mapActions } from \"vuex\";\nimport { keyboardState, toneState, recordingState, canvasState, menuState } from \"@/store/consts/states.js\";\nimport { initCanvas, createSampler, createRecorder, generateNotes, generateNotesIndexesByKey, playNote, playNoteMouse, playNoteHover, removePressedKey, removePressedKeyMouse, changeInput } from \"@/store/consts/actions.js\";\nimport { SET_MOUSE_PRESSED } from \"@/store/consts/mutation_types.js\";\nconst VISUALIZER_FILE_PATH = \"./worker.js\";\nexport default {\n  mounted() {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const pianoContainerDimensions = document.getElementById(\"piano-container\").getBoundingClientRect();\n    canvas.height = Math.floor(window.innerHeight - pianoContainerDimensions.height + 1);\n    canvas.width = Math.floor(pianoContainerDimensions.width);\n    const offscreenCanvas = canvas.transferControlToOffscreen();\n    this.initCanvas({\n      offscreenCanvas,\n      workerFile: WORKER_FILE_PATH\n    });\n    this.$root.$emit(\"resize_canvas_notes\");\n  },\n  created() {\n    this.createSampler();\n    this.createRecorder();\n    this.generateNotes();\n    this.generateNotesIndexesByKey();\n    window.addEventListener(\"keydown\", e => {\n      const key = e.key;\n      const index = this.keyboardState.notesIndexesByKey[key];\n      if (index != undefined && !this.recordingState.saveRecordingDialog) {\n        this.playNote({\n          index,\n          forBlackNote: this.keyboardState.notes[index].key === key ? false : true\n        });\n      }\n    });\n    window.addEventListener(\"keyup\", e => {\n      const key = e.key;\n      const index = this.keyboardState.notesIndexesByKey[key];\n      if (index != undefined) {\n        this.removePressedKey({\n          index,\n          forBlackNote: this.keyboardState.notes[index].key === key ? false : true\n        });\n      }\n    });\n    window.onmouseup = () => {\n      this.$store.commit(keyboardState + \"/\" + SET_MOUSE_PRESSED, false);\n    };\n  },\n  destroyed() {\n    window.removeEventListener('keydown', () => {});\n    window.removeEventListener('keyup', () => {});\n    window.removeEventListener('onmouseup', () => {});\n  },\n  methods: {\n    ...mapActions(toneState, [createSampler]),\n    ...mapActions(recordingState, [createRecorder]),\n    ...mapActions(keyboardState, [generateNotes, generateNotesIndexesByKey, playNote, playNoteMouse, playNoteHover, removePressedKey, removePressedKeyMouse, changeInput]),\n    ...mapActions(canvasState, [initCanvas]),\n    handleInput(value, key, index, forBlackNote) {\n      if (value !== '') this.changeInput({\n        value,\n        key,\n        index,\n        forBlackNote\n      });\n    },\n    whiteNoteBackground: function (pressed) {\n      return pressed ? this.menuState.whiteNoteColor : 'linear-gradient(to bottom, #eee 0%, #fff 100%)';\n    },\n    blackNoteBackground: function (pressed) {\n      return pressed ? this.menuState.blackNoteColor : 'linear-gradient(45deg, #555, #222)';\n    }\n  },\n  computed: {\n    ...mapState([keyboardState, menuState, recordingState, canvasState])\n  }\n};","map":{"version":3,"mappings":"AAiDA;AACA;AACA,8FACAA;AACA;AAEA;AAEA;EAEAC;IACA;IACA;IAEAC;IACAA;IAEA;IACA;MAAAC;MAAAC;IAAA;IAEA;EACA;EAEAC;IACA;IACA;IACA;IACA;IAEAC;MACA;MACA;MAEA;QACA;UAAAC;UAAAC;QAAA;MACA;IACA;IAEAF;MACA;MACA;MAEA;QACA;UAAAC;UAAAC;QAAA;MACA;IACA;IAEAF;MACA;IACA;EACA;EAEAG;IACAH;IACAA;IACAA;EACA;EAEAI;IACA;IAEA;IAEA,wEACAV;IAEA;IAEAW;MACA,kBACA;QAAAC;QAAAC;QAAAN;QAAAC;MAAA;IACA;IAEAM;MACA;IACA;IAEAC;MACA;IACA;EACA;EAEAC;IACA;EACA;AACA","names":["playNote","mounted","canvas","offscreenCanvas","workerFile","created","window","index","forBlackNote","destroyed","methods","handleInput","value","key","whiteNoteBackground","blackNoteBackground","computed"],"sourceRoot":"src/components/main","sources":["keyboard.vue"],"sourcesContent":["<template>\n  <div id=\"piano-container\">\n    <div class=\"piano-keyboard\">\n        <div v-for=\"(noteObject, index) in keyboardState.notes\" :key=\"index\"\n          class=\"white-note\" :class=\"[noteObject.pressed ? 'white-note-pressed' : '']\"\n          :style=\"{width: keyboardState.whiteNoteWidthSize + '%', background: whiteNoteBackground(noteObject.pressed)}\" :data-note=\"noteObject.note\"\n          @mousedown=\"playNoteMouse({index, forBlackNote : false})\" @mouseup=\"removePressedKeyMouse({index, forBlackNote : false})\"\n          @mouseover=\"playNoteHover({index, forBlackNote : false})\" @mouseleave=\"removePressedKey({index, forBlackNote : false})\">\n            \n          <div v-if=\"noteObject.blackNote\" \n            class=\"black-note\" :class=\"[noteObject.blackNote.pressed ? 'black-note-pressed' : '']\" \n            :style=\"{background: blackNoteBackground(noteObject.blackNote.pressed)}\" :data-note=\"noteObject.blackNote.note\"\n            @mousedown.stop=\"playNoteMouse({index, forBlackNote : true})\" @mouseup.stop=\"removePressedKeyMouse({index, forBlackNote : true})\"\n            @mouseover.stop=\"playNoteHover({index, forBlackNote : true})\" @mouseleave.stop=\"removePressedKey({index, forBlackNote : true})\">\n\n            <div class=\"key-group\">\n                <template v-if=\"menuState.showKeys\">\n                  <input :disabled=\"menuState.editKeys !== true\" class=\"key-input key-input-on-black-note\"\n                  :value=\"noteObject.blackNote.key\"\n                  @input=\"handleInput($event.target.value, noteObject.blackNote.key, index, true)\"/>\n                </template>\n\n                <template v-if=\"menuState.showNotes\">\n                  <div class=\"key-text key-text-on-black-note\">\n                      {{noteObject.blackNote.note}}\n                  </div>\n                </template>\n            </div>\n          </div> \n\n          <div class=\"key-group\"> \n            <template v-if=\"menuState.showKeys\" >\n              <input :disabled=\"menuState.editKeys !== true\" class=\"key-input\"\n                :value=\"noteObject.key\"\n                @input=\"handleInput($event.target.value, noteObject.key, index, false)\"/>\n            </template>\n\n            <template v-if=\"menuState.showNotes\">\n              <div class=\"key-text\">\n                {{noteObject.note}}\n              </div>\n            </template>\n          </div>\n        </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from \"vuex\";\nimport { keyboardState, toneState, recordingState, canvasState, menuState } from \"@/store/consts/states.js\";\nimport { initCanvas, createSampler, createRecorder, generateNotes , generateNotesIndexesByKey,\nplayNote, playNoteMouse, playNoteHover, removePressedKey, removePressedKeyMouse, changeInput } from \"@/store/consts/actions.js\"\nimport { SET_MOUSE_PRESSED } from \"@/store/consts/mutation_types.js\";\n\nconst VISUALIZER_FILE_PATH = \"./worker.js\";\n\nexport default {\n\nmounted() {\n  const canvas = document.getElementsByTagName(\"canvas\")[0];\n  const pianoContainerDimensions = document.getElementById(\"piano-container\").getBoundingClientRect();\n\n  canvas.height = Math.floor(window.innerHeight - pianoContainerDimensions.height + 1);\n  canvas.width = Math.floor(pianoContainerDimensions.width);\n\n  const offscreenCanvas = canvas.transferControlToOffscreen();\n  this.initCanvas({offscreenCanvas, workerFile : WORKER_FILE_PATH});\n\n  this.$root.$emit(\"resize_canvas_notes\");\n},\n\ncreated() {\n  this.createSampler();\n  this.createRecorder();    \n  this.generateNotes();\n  this.generateNotesIndexesByKey();\n\n  window.addEventListener(\"keydown\", e => {\n    const key = e.key;\n    const index = this.keyboardState.notesIndexesByKey[key];\n\n    if(index != undefined && !this.recordingState.saveRecordingDialog) {\n      this.playNote({index, forBlackNote : this.keyboardState.notes[index].key === key ? false : true});\n    }\n  });\n\n  window.addEventListener(\"keyup\", e => {\n    const key = e.key;\n    const index = this.keyboardState.notesIndexesByKey[key];\n\n    if(index != undefined) {\n      this.removePressedKey({index, forBlackNote : this.keyboardState.notes[index].key === key ? false : true});\n    }\n  });\n\n  window.onmouseup = () => {\n    this.$store.commit(keyboardState + \"/\" + SET_MOUSE_PRESSED, false);\n  }\n},\n\ndestroyed() {\n  window.removeEventListener('keydown', () => {});\n  window.removeEventListener('keyup', () => {});\n  window.removeEventListener('onmouseup', () => {});\n},\n\nmethods: {\n  ...mapActions(toneState, [createSampler]),\n\n  ...mapActions(recordingState, [createRecorder]),\n\n  ...mapActions(keyboardState, [generateNotes, generateNotesIndexesByKey,\n  playNote, playNoteMouse, playNoteHover, removePressedKey, removePressedKeyMouse, changeInput]),\n\n  ...mapActions(canvasState, [initCanvas]),\n\n  handleInput(value, key, index, forBlackNote){\n    if(value !== '')\n      this.changeInput({value, key, index, forBlackNote});\n  },\n\n  whiteNoteBackground: function(pressed){\n    return pressed ? this.menuState.whiteNoteColor : 'linear-gradient(to bottom, #eee 0%, #fff 100%)';\n  },\n  \n  blackNoteBackground: function(pressed){\n    return pressed ? this.menuState.blackNoteColor : 'linear-gradient(45deg, #555, #222)';\n  }\n},\n\ncomputed: {\n  ...mapState([keyboardState, menuState, recordingState, canvasState]),\n}\n}\n</script>\n\n<style>\n\n#piano-container {\nwidth: 100%;\nbackground-color: black;\n}\n\n.piano-keyboard {\nposition: relative;\nheight: 14vw;\nwidth: 100%;\n}\n\n.white-note {\ndisplay: flex;\njustify-content: center;\nfloat: left;\nposition: relative;\ncursor: pointer;\ncolor: black;\nheight: 98%;\nwidth: 4.761%;\nborder-left: 1px solid #bbb;\nborder-bottom: 1px solid #bbb;\nborder-right: 1px solid #333;\nborder-radius: 0 0 5px 5px;\nbox-shadow: 0px 0px 0px rgba(255, 255, 255, 0.8) inset,\n  -2px -5px 3px #ccc inset, 0 0 3px rgba(0, 0, 0, 0.2);\n}\n\n.white-note-pressed {\nborder-left: 1px solid #999;\nborder-bottom: 1px solid #999;\nborder-right: 1px solid #777;\nbox-shadow: 2px 0 3px rgba(0, 0, 0, 0.1) inset,\n  -5px 5px 20px rgba(0, 0, 0, 0.2) inset, 0 0 3px rgba(0, 0, 0, 0.2);\n}\n\n.black-note {\ndisplay: flex;\nalign-items: flex-end;\njustify-content: center;\nposition: absolute;\ncursor: pointer;\nheight: 65%;\nwidth: 65%;\nleft: 68%;\nz-index: 1;\ncolor: white;\nborder-radius: 0 0 3px 3px;\nbox-shadow: -1px -1px 2px rgba(255, 255, 255, 0.2) inset,\n  0 -5px 2px 3px rgba(0, 0, 0, 0.5) inset, 0 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.black-note-pressed {\nbox-shadow: -1px -1px 2px rgba(255, 255, 255, 0.2) inset,\n  0 -2px 2px 3px rgba(0, 0, 0, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.key-group {\nalign-self: flex-end;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nmargin-bottom: 0.8vw;\nfont-size: 1.2vw;\n}\n\n.key-text {\nmargin-top: 0.8vw;\n}\n\n.key-text-on-black-note {\ntransform: rotate(-90deg);\nmargin: 0.8vw 0;\nmargin-top: 1vw;\n}\n\n.key-input {\ntext-align: center;\nwidth: 2em;\nborder: 1px solid #aaaaaa;\ncolor: inherit;\nfont-size: 1vw;\n}\n\n.key-input:disabled {\nbackground: inherit;\nborder: none;\ncolor: inherit;\n}\n\n.key-input-on-black-note {\nbackground-color: rgb(60, 60, 60);\nborder: 1px solid rgb(80, 80, 80);\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}