{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { canvasState, recordingState } from \"@/store/consts/states.js\";\nimport { CLEAR_NOTES_ARRAY, CLEAR_NOTES_INDICES_ARRAY, SET_WHITE_NOTE_WIDTH_SIZE, SET_NOTE_PRESSED, SET_MOUSE_PRESSED, ADD_NOTE, SET_NOTE_KEY, UPDATE_INDEX_KEY, ADD_NEW_KEY_INDEX, DELETE_INDEX_KEY, CLEAR_PRESSED_KEYS, ADD_RECORD_MAP, ADD_RECORD_MIDI } from \"@/store/consts/mutations.js\";\nimport { playNote, playNoteMouse, playNoteHover, removePressedKey, removePressedKeyMouse, changeInput, generateNotes, generateNotesIndexesByKey, startDrawNote, stopDrawNote } from \"@/store/consts/actions.js\";\nexport default {\n  namespaced: true,\n  state: {\n    notesIndexesByKey: {},\n    notes: [],\n    whiteNoteWidthSize: 0,\n    isMousePressed: false,\n    allKeys: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/'],\n    allNotes: ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n  },\n  mutations: {\n    [CLEAR_NOTES_ARRAY](state) {\n      state.notes.length = 0;\n    },\n    [CLEAR_NOTES_INDICES_ARRAY](state) {\n      state.notesIndexesByKey.length = 0;\n    },\n    [SET_WHITE_NOTE_WIDTH_SIZE](state, size) {\n      state.whiteNoteWidthSize = size;\n    },\n    [SET_NOTE_PRESSED](state, {\n      index,\n      forBlackNote,\n      pressed\n    }) {\n      if (forBlackNote) {\n        state.notes[index].blackNote.pressed = pressed;\n      } else {\n        state.notes[index].pressed = pressed;\n      }\n    },\n    [SET_MOUSE_PRESSED](state, value) {\n      state.isMousePressed = value;\n    },\n    [ADD_NOTE](state, note) {\n      state.notes.push(note);\n    },\n    [SET_NOTE_KEY](state, {\n      value,\n      index,\n      forBlackNote\n    }) {\n      if (forBlackNote) {\n        state.notes[index].blackNote.key = value;\n      } else {\n        state.notes[index].key = value;\n      }\n    },\n    [ADD_NEW_KEY_INDEX](state, {\n      index,\n      forBlackNote\n    }) {\n      if (forBlackNote) {\n        state.notesIndexesByKey[states.notes[index].blackNote.key] = index;\n      } else {\n        state.notesIndexesByKey[state.notes[index].key] = indexl;\n      }\n    },\n    [DELETE_INDEX_KEY](state, key) {\n      delete state.notesIndexesByKey[key];\n    },\n    [UPDATE_INDEX_KEY](state, {\n      key,\n      index\n    }) {\n      state.notesIndexesByKey[key] = index;\n    },\n    [CLEAR_PRESSED_KEYS](state) {\n      for (let note of state.notes) {\n        note.pressed = false;\n        if (note.blackNote) {\n          note.blackNote.pressed = false;\n        }\n      }\n    }\n  },\n  actions: {\n    [playNote]({\n      commit,\n      state,\n      rootState,\n      dispatch\n    }, {\n      index,\n      forBlackNote\n    }) {\n      const currentNote = forBlackNote ? state.notes[index].blackNote : state.notes[index];\n      if (!currentNote.pressed && !rootState.menuState.editKeys) {\n        rootState.toneState.sampler.triggerAttack(currentNote.note);\n        commit(SET_NOTE_PRESSED, {\n          index,\n          forBlackNote,\n          pressed: true\n        });\n        if (rootState.recordingState.isRecording) {\n          commit(recordingState + \"/\" + ADD_RECORD_MAP, currentNote.note, {\n            root: true\n          });\n        }\n        dispatch(canvasState + \"/\" + startDrawNote, {\n          noteName: currentNote.note,\n          forBlackNote\n        }, {\n          root: true\n        });\n      }\n    },\n    [playNoteMouse]({\n      commit,\n      dispatch\n    }, {\n      index,\n      forBlackNote\n    }) {\n      commit(SET_MOUSE_PRESSED, true);\n      dispatch(playNote, {\n        index,\n        forBlackNote\n      });\n    },\n    [playNoteHover]({\n      state,\n      dispatch\n    }, {\n      index,\n      forBlackNote\n    }) {\n      if (state.isMousePressed) {\n        dispatch(playNote, {\n          index,\n          forBlackNote\n        });\n      }\n    },\n    [removePressedKey]({\n      state,\n      commit,\n      rootState,\n      dispatch\n    }, {\n      index,\n      forBlackNote\n    }) {\n      const currentNote = forBlackNote ? state.notes[index].blackNote : state.notes[index];\n      if (currentNote.pressed === true) {\n        if (rootState.menuState.sustain == false) {\n          rootState.toneState.sampler.triggerRelease(currentNote.note);\n        }\n        commit(SET_NOTE_PRESSED, {\n          index,\n          forBlackNote,\n          pressed: false\n        });\n        if (rootState.recordingState.isRecording) {\n          commit(recordingState + \"/\" + ADD_RECORD_MIDI, currentNote.note, {\n            root: true\n          });\n        }\n        dispatch(canvasState + \"/\" + stopDrawNote, {\n          noteName: currentNote.note,\n          forBlackNote\n        }, {\n          root: true\n        });\n      }\n    },\n    [removePressedKeyMouse]({\n      commit,\n      dispatch\n    }, {\n      index,\n      forBlackNote\n    }) {\n      commit(SET_MOUSE_PRESSED, false);\n      dispatch(removePressedKey, {\n        index,\n        forBlackNote\n      });\n    },\n    [changeInput]({\n      commit\n    }, {\n      value,\n      key,\n      index,\n      forBlackNote\n    }) {\n      commit(DELETE_INDEX_KEY, key);\n      commit(SET_NOTE_KEY, {\n        value,\n        index,\n        forBlackNote\n      });\n      commit(UPDATE_INDEX_KEY, {\n        key: value,\n        index\n      });\n    },\n    [generateNotes]({\n      commit,\n      state,\n      rootState\n    }) {\n      commit(CLEAR_NOTES_ARRAY);\n      let keyIndex = 0;\n      let noteIndex = 0;\n      const startOctave = rootState.menuState.octaves[0];\n      const endOctave = rootState.menuState.octaves[1];\n      for (let octave = startOctave; octave <= endOctave; octave++) {\n        while (noteIndex < state.allNotes.length) {\n          const currentNote = state.allNotes[noteIndex];\n          let newNote = {\n            note: currentNote + octave,\n            key: state.allKeys[keyIndex++],\n            pressed: false\n          };\n          if (currentNote != 'B' && currentNote != 'E') {\n            let blackNote = {\n              note: currentNote + '#' + octave,\n              key: state.allKeys[keyIndex++],\n              pressed: false\n            };\n            newNote[\"blackNote\"] = blackNote;\n          }\n          commit(ADD_NOTE, newNote);\n          if (octave === endOctave && currentNote === 'B') {\n            // we always end with note B\n            break;\n          }\n          noteIndex++;\n        }\n        noteIndex = 0;\n      }\n      commit(SET_WHITE_NOTE_WIDTH_SIZE, 100 / state.notes.length);\n    },\n    [generateNotesIndexesByKey]({\n      commit,\n      state\n    }) {\n      commit(CLEAR_NOTES_INDICES_ARRAY);\n      for (let index = 0; index < state.notes.length; index++) {\n        let forBlackNote = false;\n        commit(ADD_NEW_KEY_INDEX, {\n          index,\n          forBlackNote\n        });\n        if (state.notes[index].blackNote != undefined) {\n          forBlackNote = true;\n          commit(ADD_NEW_KEY_INDEX, {\n            index,\n            forBlackNote\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["canvasState","recordingState","CLEAR_NOTES_ARRAY","CLEAR_NOTES_INDICES_ARRAY","SET_WHITE_NOTE_WIDTH_SIZE","SET_NOTE_PRESSED","SET_MOUSE_PRESSED","ADD_NOTE","SET_NOTE_KEY","UPDATE_INDEX_KEY","ADD_NEW_KEY_INDEX","DELETE_INDEX_KEY","CLEAR_PRESSED_KEYS","ADD_RECORD_MAP","ADD_RECORD_MIDI","playNote","playNoteMouse","playNoteHover","removePressedKey","removePressedKeyMouse","changeInput","generateNotes","generateNotesIndexesByKey","startDrawNote","stopDrawNote","namespaced","state","notesIndexesByKey","notes","whiteNoteWidthSize","isMousePressed","allKeys","allNotes","mutations","length","size","index","forBlackNote","pressed","blackNote","value","note","push","key","states","indexl","actions","commit","rootState","dispatch","currentNote","menuState","editKeys","toneState","sampler","triggerAttack","isRecording","root","noteName","sustain","triggerRelease","keyIndex","noteIndex","startOctave","octaves","endOctave","octave","newNote","undefined"],"sources":["/Users/Sunhaoxiang/Desktop/IB_CS/CS_IA/src/store/modules/keyboardState.js"],"sourcesContent":["import { canvasState, recordingState } from \"@/store/consts/states.js\";\nimport { CLEAR_NOTES_ARRAY, \n  CLEAR_NOTES_INDICES_ARRAY,\n  SET_WHITE_NOTE_WIDTH_SIZE,\n  SET_NOTE_PRESSED,\n  SET_MOUSE_PRESSED,\n  ADD_NOTE,\n  SET_NOTE_KEY,\n  UPDATE_INDEX_KEY,\n  ADD_NEW_KEY_INDEX,\n  DELETE_INDEX_KEY,\n  CLEAR_PRESSED_KEYS,\n  ADD_RECORD_MAP,\n  ADD_RECORD_MIDI\n} from \"@/store/consts/mutations.js\";\nimport { playNote, \n  playNoteMouse,\n  playNoteHover,\n  removePressedKey,\n  removePressedKeyMouse,\n  changeInput,\n  generateNotes,\n  generateNotesIndexesByKey,\n  startDrawNote,\n  stopDrawNote\n} from \"@/store/consts/actions.js\";\n\nexport default {\n    namespaced: true,\n\n    state: {\n      notesIndexesByKey: {},\n      notes : [],\n\n      whiteNoteWidthSize: 0,\n      isMousePressed: false,\n\n      allKeys: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',\n        'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',';',\n        'z','x','c','v','b','n','m',',','.','/'\n      ],\n\n      allNotes:['C', 'D', 'E', 'F', 'G', 'A', 'B'],\n    },\n\n    mutations: {\n        [CLEAR_NOTES_ARRAY](state){\n            state.notes.length = 0;\n        },\n        [CLEAR_NOTES_INDICES_ARRAY](state){\n            state.notesIndexesByKey.length = 0;\n        },\n        [SET_WHITE_NOTE_WIDTH_SIZE](state, size){\n          state.whiteNoteWidthSize = size;\n        },\n        [SET_NOTE_PRESSED](state, { index, forBlackNote, pressed }){\n          if(forBlackNote){\n            state.notes[index].blackNote.pressed = pressed;\n          } else {\n            state.notes[index].pressed = pressed;\n          }\n        },\n        [SET_MOUSE_PRESSED](state, value){\n          state.isMousePressed = value;\n        },\n        [ADD_NOTE](state, note){\n            state.notes.push(note);\n      },\n        [SET_NOTE_KEY](state, { value, index, forBlackNote }) {\n          if (forBlackNote) {\n            state.notes[index].blackNote.key = value;\n          }\n          else {\n            state.notes[index].key = value;\n          }\n        },\n        [ADD_NEW_KEY_INDEX](state, { index, forBlackNote }) {\n          if (forBlackNote) {\n            state.notesIndexesByKey[states.notes[index].blackNote.key] = index\n          }\n          else {\n            state.notesIndexesByKey[state.notes[index].key] =indexl\n          }\n      }, \n      [DELETE_INDEX_KEY](state, key) {\n          delete state.notesIndexesByKey[key]\n      },\n      [UPDATE_INDEX_KEY](state, { key, index }) {\n        state.notesIndexesByKey[key] = index\n      },\n        [CLEAR_PRESSED_KEYS](state) {\n          for(let note of state.notes) {\n            note.pressed = false;\n            if(note.blackNote){\n              note.blackNote.pressed = false;\n            }\n          }\n        }\n    },\n\n    actions: {\n      [playNote]({ commit, state, rootState, dispatch}, { index, forBlackNote }) {\n        const currentNote = forBlackNote ? state.notes[index].blackNote : state.notes[index];\n        if(!currentNote.pressed && !rootState.menuState.editKeys) {\n\n          rootState.toneState.sampler.triggerAttack(currentNote.note);\n\n          commit(SET_NOTE_PRESSED, { index, forBlackNote, pressed : true });\n        \n          if(rootState.recordingState.isRecording){\n            commit(recordingState + \"/\" + ADD_RECORD_MAP, currentNote.note, {root:true});\n          }\n\n          dispatch(canvasState + \"/\" + startDrawNote, {noteName: currentNote.note, forBlackNote}, {root:true});\n        }\n      },\n\n      [playNoteMouse]({ commit, dispatch }, { index, forBlackNote }) {\n        commit(SET_MOUSE_PRESSED, true);\n        dispatch(playNote, { index, forBlackNote });\n      },\n  \n      [playNoteHover]({ state, dispatch }, { index, forBlackNote }) {\n        if(state.isMousePressed){ \n          dispatch(playNote, { index, forBlackNote });\n        }\n      },\n\n      [removePressedKey]({ state, commit, rootState, dispatch }, { index, forBlackNote }) {\n        const currentNote = forBlackNote ? state.notes[index].blackNote : state.notes[index];\n        if(currentNote.pressed === true){\n\n          if(rootState.menuState.sustain == false){\n            rootState.toneState.sampler.triggerRelease(currentNote.note);\n          }\n\n          commit(SET_NOTE_PRESSED, { index, forBlackNote, pressed : false });\n\n          if(rootState.recordingState.isRecording){\n            commit(recordingState + \"/\" + ADD_RECORD_MIDI, currentNote.note, {root:true});\n          }\n\n          dispatch(canvasState + \"/\" + stopDrawNote, {noteName: currentNote.note, forBlackNote}, {root:true});\n        }\n      },\n\n      [removePressedKeyMouse]({ commit, dispatch }, { index, forBlackNote }) {\n        commit(SET_MOUSE_PRESSED, false);\n        dispatch(removePressedKey, { index, forBlackNote });\n      },\n\n      [changeInput]({ commit }, {value, key, index, forBlackNote}) {\n        commit(DELETE_INDEX_KEY, key);\n        commit(SET_NOTE_KEY, {value, index, forBlackNote});\n        commit(UPDATE_INDEX_KEY, {key:value, index})\n      },\n\n      [generateNotes]({ commit, state, rootState }) {\n        commit(CLEAR_NOTES_ARRAY);\n        let keyIndex = 0;\n        let noteIndex = 0;\n        const startOctave = rootState.menuState.octaves[0];\n        const endOctave = rootState.menuState.octaves[1];\n\n        for(let octave = startOctave; octave <= endOctave; octave++) {\n  \n            while(noteIndex < state.allNotes.length) {\n              const currentNote = state.allNotes[noteIndex];\n  \n              let newNote = {\n                note: currentNote + octave,\n                key: state.allKeys[keyIndex++],\n                pressed: false,\n              }\n  \n              if(currentNote != 'B' && currentNote!= 'E') {\n                let blackNote = {\n                  note: currentNote + '#' + octave,\n                  key: state.allKeys[keyIndex++],\n                  pressed: false,\n                }\n  \n                newNote[\"blackNote\"] = blackNote;\n              }\n            \n              commit(ADD_NOTE, newNote);\n  \n              if(octave === endOctave && currentNote === 'B'){ // we always end with note B\n                break;\n              }\n  \n              noteIndex++;\n            }\n            noteIndex = 0;\n        }\n  \n        commit(SET_WHITE_NOTE_WIDTH_SIZE, 100 / state.notes.length);\n      },\n\n      [generateNotesIndexesByKey]({ commit, state }) {\n          commit(CLEAR_NOTES_INDICES_ARRAY);\n          \n          for(let index = 0; index < state.notes.length; index++){\n            let forBlackNote = false;  \n            commit(ADD_NEW_KEY_INDEX, { index, forBlackNote });\n    \n            if(state.notes[index].blackNote != undefined){\n              forBlackNote = true;\n              commit(ADD_NEW_KEY_INDEX, { index, forBlackNote });\n            } \n          }\n      },\n    },\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}