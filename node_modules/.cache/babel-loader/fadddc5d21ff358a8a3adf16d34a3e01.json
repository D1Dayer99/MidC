{"ast":null,"code":"import { mapState } from 'vuex';\nimport { PlayingState } from '../utils/PlayingState';\nimport Timer from \"../utils/SetTimeoutTimer\";\nimport { recordingState, canvasState, menuState, playlistState } from \"@/store/consts/states.js\";\nimport { ADD_TIMER } from \"@/store/consts/mutation_types.js\";\nexport default {\n  data: () => {\n    return {\n      playingPercent: 0,\n      counter: 0\n    };\n  },\n  created() {\n    if (this.recordingState.isRecording) {\n      this.handleRecording();\n    } else {\n      this.handlePlaySong();\n    }\n  },\n  methods: {\n    handlePlaySong() {\n      this.$store.commit(playlistState + \"/\" + ADD_TIMER, new Timer(() => {\n        let interval = setInterval(() => {\n          if (this.menuState.playing === PlayingState.PLAY) {\n            this.playingPercent = this.counter * 100 / this.playlistState.currentSongDuration;\n            this.counter = this.counter + 0.25 * this.menuState.speed / 100;\n            if (this.counter >= this.playlistState.currentSongDuration) {\n              clearInterval(interval);\n            }\n          }\n        }, 250 * this.menuState.speed / 100);\n      }, this.canvasState.waterfallDelay));\n    },\n    handleRecording() {\n      let interval = setInterval(() => {\n        this.counter += 1;\n        if (!this.recordingState.isRecording) {\n          clearInterval(interval);\n        }\n      }, 1000);\n    }\n  },\n  computed: {\n    ...mapState([playlistState, canvasState, menuState, recordingState]),\n    currentTime: function () {\n      const counterFloor = Math.floor(this.counter);\n      let minutes = Math.floor(counterFloor / 60);\n      let seconds = counterFloor % 60;\n      if (minutes <= 9) {\n        minutes = '0' + minutes;\n      }\n      if (seconds <= 9) {\n        seconds = '0' + seconds;\n      }\n      return minutes + ':' + seconds;\n    }\n  }\n};","map":{"version":3,"mappings":"AAUA;AACA;AACA;AACA;AACA;AACA;EACAA;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA,OACA;MACA;IACA;EACA;EACAC;IACAC;MACA,oDACA;QACA;UACA;YACA;YACA;YACA;cACAC;YACA;UACA;QACA;MACA,oCACA;IACA;IACAC;MACA;QACA;QACA;UACAD;QACA;MACA;IACA;EACA;EACAE;IACA;IAEAC;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;QACAC;MACA;MACA;IACA;EACA;AACA","names":["data","playingPercent","counter","created","methods","handlePlaySong","clearInterval","handleRecording","computed","currentTime","minutes","seconds"],"sourceRoot":"src/components","sources":["ProgressBar.vue"],"sourcesContent":["<template>\n    <div style=\"position: relative\">\n        <v-progress-linear v-if=\"!recordingState.isRecording\" style=\"position: absolute\" color=\"#ffb200\" :value=\"playingPercent\"> </v-progress-linear>\n        <div style=\"position: absolute; top: 8px; right: 8px; color: white\">\n            {{ currentTime }} \n        </div>\n    </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { PlayingState } from '../utils/PlayingState';\nimport Timer  from \"../utils/SetTimeoutTimer\"\nimport { recordingState, canvasState, menuState, playlistState } from \"@/store/consts/states.js\";\nimport { ADD_TIMER } from \"@/store/consts/mutation_types.js\";\nexport default {\n    data: () => {\n        return {\n            playingPercent: 0,\n            counter: 0,\n        }\n    },\n    created() {\n        if (this.recordingState.isRecording) {\n            this.handleRecording();\n        }\n        else {\n            this.handlePlaySong();\n        }\n    },\n    methods: {\n        handlePlaySong() {\n            this.$store.commit(playlistState + \"/\" + ADD_TIMER, \n                new Timer(() => {\n                    let interval = setInterval(() => {\n                        if(this.menuState.playing === PlayingState.PLAY) {\n                            this.playingPercent = this.counter * 100 / this.playlistState.currentSongDuration;\n                            this.counter = this.counter + 0.25 * this.menuState.speed / 100;\n                            if (this.counter >= this.playlistState.currentSongDuration) {\n                                clearInterval(interval);\n                            }\n                        }\n                    }, 250 * this.menuState.speed / 100);\n                }, this.canvasState.waterfallDelay)\n            );\n        },\n        handleRecording() {\n            let interval = setInterval(() => {\n                this.counter += 1;\n                if (!this.recordingState.isRecording) {\n                    clearInterval(interval);\n                }\n            }, 1000);\n        }\n    },\n    computed: {\n        ...mapState([playlistState, canvasState, menuState, recordingState]),\n        \n        currentTime: function() {\n            const counterFloor = Math.floor(this.counter);\n            let minutes = Math.floor(counterFloor/ 60);\n            let seconds = counterFloor % 60;\n            if (minutes <= 9){\n                minutes = '0' + minutes;\n            }\n            if (seconds <= 9) {\n                seconds = '0' + seconds;\n            }\n            return minutes + ':' + seconds;\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n"]},"metadata":{},"sourceType":"module"}